{"version":3,"sources":["components/TimerButton/TimerButton.tsx","components/Timer/Timer.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["TimerButton","buttonAction","buttonValue","className","onClick","toLowerCase","Timer","props","myInterval","stopTimer","console","log","clearInterval","setState","isOn","render","state","minutes","seconds","startTimer","resetTimer","bind","this","setInterval","alert","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wNAkBeA,EAdK,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,YAAjB,OAClB,yBAAKC,UAAU,mBAAmBC,QAAS,kBAAMH,MAC/C,4BACEE,UAAS,UAAKD,EAAYG,cAAjB,WACRH,KC8EQI,E,kDA1Eb,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAFRC,gBACwB,IA0CxBC,UAAY,WACVC,QAAQC,IAAI,kBACZC,cAAc,EAAKJ,YACnB,EAAKK,SAAS,CAAEC,MAAM,KA7CA,EAyDxBC,OAAS,WAAO,IAAD,EACgB,EAAKC,MAA1BC,EADK,EACLA,QAASC,EADJ,EACIA,QACjB,OACE,yBAAKf,UAAU,mBACb,yBAAKA,UAAU,gBACZc,EADH,IACaC,EAAU,GAAV,WAAmBA,GAAYA,GAE5C,yBAAKf,UAAU,0BACb,kBAAC,EAAD,CAAaF,aAAc,EAAKkB,WAAYjB,YAAa,UACzD,kBAAC,EAAD,CAAaD,aAAc,EAAKQ,UAAWP,YAAa,SACxD,kBAAC,EAAD,CAAaD,aAAc,EAAKmB,WAAYlB,YAAa,aAjE/D,EAAKc,MAAQ,CACXC,QAAS,GACTC,QAAS,GACTJ,MAAM,GAER,EAAKN,WAAaD,EAClB,EAAKY,WAAa,EAAKA,WAAWE,KAAhB,gBAClB,EAAKD,WAAa,EAAKA,WAAWC,KAAhB,gBATI,E,yDAYV,IAAD,OACXX,QAAQC,IAAI,oBACY,IAApBW,KAAKN,MAAMF,OAIfQ,KAAKd,WAAae,aAAY,WAAO,IAAD,EACL,EAAKP,MAA1BE,EAD0B,EAC1BA,QAASD,EADiB,EACjBA,QAEbC,EAAU,GACZ,EAAKL,UAAS,kBAAkB,CAC9BK,QADY,EAAGA,QACI,MAGP,IAAZA,IACc,IAAZD,GACFO,MAAM,aACN,EAAKJ,aACLR,cAAc,EAAKJ,aAEnB,EAAKK,UAAS,kBAAkB,CAC9BI,QADY,EAAGA,QACI,EACnBC,QAAS,UAId,KACHI,KAAKT,SAAS,CAAEC,MAAM,O,mCAUtBJ,QAAQC,IAAI,oBACZW,KAAKb,YACLa,KAAKT,SAAS,CACZI,QAAS,GACTC,QAAS,S,GAvDKO,aCFLC,EAJH,WACV,OAAO,yBAAKvB,UAAU,iBAAgB,kBAAC,EAAD,QCOpBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASjB,OACP,kBAAC,IAAMkB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.4a4a6ee9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//import './TimerButton.css';\r\n\r\nconst TimerButton = ({ buttonAction, buttonValue }: any) => (\r\n  <div className=\"button-container\" onClick={() => buttonAction()}>\r\n    <button\r\n      className={`${buttonValue.toLowerCase()}-timer`}>\r\n      {buttonValue}\r\n    </button>\r\n  </div>\r\n);\r\n\r\nTimerButton.propTypes = {\r\n  buttonAction: PropTypes.func.isRequired,\r\n  buttonValue: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default TimerButton;\r\n","import React, { Component } from \"react\";\r\nimport TimerButton from \"../TimerButton/TimerButton\";\r\n//import \"./Timer.css\";\r\n\r\ntype stateTypes = {\r\n  minutes: number;\r\n  seconds: number;\r\n  isOn: boolean;\r\n};\r\n\r\nclass Timer extends Component<{}, stateTypes> {\r\n  myInterval: ReturnType<typeof setInterval>;\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      minutes: 59,\r\n      seconds: 59,\r\n      isOn: false,\r\n    };\r\n    this.myInterval = props;\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.resetTimer = this.resetTimer.bind(this);\r\n  }\r\n\r\n  startTimer() {\r\n    console.log(\"Starting timer.\");\r\n    if (this.state.isOn === true) {\r\n      return;\r\n    }\r\n\r\n    this.myInterval = setInterval(() => {\r\n      const { seconds, minutes } = this.state;\r\n\r\n      if (seconds > 0) {\r\n        this.setState(({ seconds }) => ({\r\n          seconds: seconds - 1,\r\n        }));\r\n      }\r\n      if (seconds === 0) {\r\n        if (minutes === 0) {\r\n          alert(`Time's Up`);\r\n          this.resetTimer();\r\n          clearInterval(this.myInterval);\r\n        } else {\r\n          this.setState(({ minutes }) => ({\r\n            minutes: minutes - 1,\r\n            seconds: 59,\r\n          }));\r\n        }\r\n      }\r\n    }, 1000);\r\n    this.setState({ isOn: true });\r\n  }\r\n\r\n  stopTimer = () => {\r\n    console.log(\"Stoping timer.\");\r\n    clearInterval(this.myInterval);\r\n    this.setState({ isOn: false });\r\n  };\r\n\r\n  resetTimer() {\r\n    console.log(\"Resetting timer.\");\r\n    this.stopTimer();\r\n    this.setState({\r\n      minutes: 59,\r\n      seconds: 59,\r\n    });\r\n  }\r\n\r\n  render = () => {\r\n    const { minutes, seconds } = this.state;\r\n    return (\r\n      <div className=\"timer-container\">\r\n        <div className=\"time-display\">\r\n          {minutes}:{seconds < 10 ? `0${seconds}` : seconds}\r\n        </div>\r\n        <div className=\"timer-button-container\">\r\n          <TimerButton buttonAction={this.startTimer} buttonValue={\"Start\"} />\r\n          <TimerButton buttonAction={this.stopTimer} buttonValue={\"Stop\"} />\r\n          <TimerButton buttonAction={this.resetTimer} buttonValue={\"Reset\"} />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport Timer from \"../Timer/Timer\";\r\n//import \"./App.css\";\r\n\r\nconst App = () => {\r\n  return <div className=\"app-container\"><Timer /></div>;\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}